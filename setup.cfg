[metadata]
name = aim2-project
version = 0.1.0
description = AI-First Ontology Information Extraction framework for automated scientific literature processing and knowledge graph construction
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/your-org/aim2-project
author = AIM2 Project Contributors
author_email =
maintainer = AIM2 Project Contributors
license = MIT
license_files = LICENSE
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Science/Research
    Intended Audience :: Developers
    Intended Audience :: Education
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Topic :: Scientific/Engineering :: Bio-Informatics
    Topic :: Scientific/Engineering :: Information Analysis
    Topic :: Text Processing :: Linguistic
    Topic :: Software Development :: Libraries :: Python Modules
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Operating System :: OS Independent
    Operating System :: POSIX :: Linux
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows
    Natural Language :: English
    Environment :: Console
    Environment :: Other Environment
keywords =
    ontology
    information-extraction
    nlp
    llm
    ai
    knowledge-graph
    scientific-literature
    entity-recognition
    relationship-extraction
    machine-learning
    transformers
    bioinformatics
    text-mining
    automation
    synthetic-data
project_urls =
    Bug Reports = https://github.com/your-org/aim2-project/issues
    Source = https://github.com/your-org/aim2-project
    Documentation = https://github.com/your-org/aim2-project/docs

[options]
packages = find:
package_dir =
    = .
python_requires = >=3.8
include_package_data = True
zip_safe = False
install_requires = file: aim2_project/requirements.txt

[options.packages.find]
include = aim2_project*
exclude = tests*

[options.package_data]
aim2_project =
    configs/*.yaml
    configs/*.yml
    data/benchmarks/*
    data/corpus/*
    data/ontologies/*
    data/synthetic/*

[options.extras_require]
dev =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    black>=23.7.0
    isort>=5.12.0
    mypy>=1.5.0
    pre-commit>=3.3.0
    flake8>=6.0.0
    bandit>=1.7.5
test =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
    pytest-xdist>=3.3.0
    pytest-timeout>=2.1.0
    pytest-asyncio>=0.21.0
    coverage>=7.2.0
lint =
    black>=23.7.0
    isort>=5.12.0
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.2
    flake8-bugbear>=23.7.0
    bandit>=1.7.5
    pylint>=2.17.0
type =
    mypy>=1.5.0
    types-PyYAML>=6.0.0
    types-requests>=2.31.0
    types-setuptools>=68.0.0
docs =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0
all =
    %(dev)s
    %(test)s
    %(lint)s
    %(type)s
    %(docs)s

[options.entry_points]
console_scripts =
    aim2-ontology-manager = aim2_project.aim2_ontology.ontology_manager:main
    aim2-ontology-trimmer = aim2_project.aim2_ontology.ontology_trimmer:main
    aim2-ontology-integrator = aim2_project.aim2_ontology.ontology_integrator:main
    aim2-ner-extractor = aim2_project.aim2_extraction.ner_extractor:main
    aim2-corpus-builder = aim2_project.aim2_extraction.corpus_builder:main
    aim2-relationship-extractor = aim2_project.aim2_extraction.relationship_extractor:main
    aim2-evaluation-benchmarker = aim2_project.aim2_extraction.evaluation_benchmarker:main
    aim2-synthetic-generator = aim2_project.aim2_utils.synthetic_data_generator:main
    aim2-config-manager = aim2_project.aim2_utils.config_manager:main

# ====================================================================
# Testing Configuration (pytest)
# ====================================================================
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=aim2_project
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    -ra
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Tests that take a long time to run
    requires_network: Tests that require network access
    requires_gpu: Tests that require GPU
    setup: Tests related to setup.py functionality
    dependencies: Tests related to dependency management
    packaging: Tests related to packaging and distribution
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:transformers
    ignore::FutureWarning:torch
minversion = 3.8
timeout = 300

# ====================================================================
# Coverage Configuration
# ====================================================================
[coverage:run]
source = aim2_project
branch = True
parallel = True
omit =
    */tests/*
    */test_*
    setup.py
    */venv/*
    */__pycache__/*
    */migrations/*
    .tox/*
    build/*
    dist/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = AIM2 Project Coverage Report

[coverage:xml]
output = coverage.xml

# ====================================================================
# Code Formatting (black)
# ====================================================================
[tool:black]
line-length = 88
target-version = py38
include = \.pyi?$
extend-exclude =
    /(
        \.eggs
        | \.git
        | \.hg
        | \.mypy_cache
        | \.tox
        | \.venv
        | _build
        | buck-out
        | build
        | dist
        | migrations
    )/

# ====================================================================
# Import Sorting (isort)
# ====================================================================
[tool:isort]
profile = black
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = aim2_project,tests
known_first_party = aim2_project
known_third_party =
    pytest
    numpy
    pandas
    torch
    transformers
    requests
    yaml
    click
    rich
skip_glob =
    */migrations/*
    */venv/*
    */env/*
    .tox/*
    build/*
    dist/*

# ====================================================================
# Linting (flake8)
# ====================================================================
[flake8]
max-line-length = 88
max-complexity = 10
select = E,W,F,C,N,B
ignore =
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    W504,  # line break after binary operator
    E722,  # do not use bare except
    B008,  # do not perform function calls in argument defaults
exclude =
    .git,
    __pycache__,
    .venv,
    venv,
    .tox,
    build,
    dist,
    *.egg-info,
    migrations,
    .pytest_cache
per-file-ignores =
    __init__.py:F401
    tests/*:S101,D103
    conftest.py:D103
    setup.py:D100
# flake8-docstrings
docstring-convention = google
# flake8-import-order
import-order-style = google
application-import-names = aim2_project

# ====================================================================
# Type Checking (mypy)
# ====================================================================
[mypy]
python_version = 3.8
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

# Per-module options
[mypy-tests.*]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[mypy-conftest]
disallow_untyped_defs = false

# Third-party packages without type stubs
[mypy-transformers.*]
ignore_missing_imports = true

[mypy-torch.*]
ignore_missing_imports = true

[mypy-sklearn.*]
ignore_missing_imports = true

[mypy-spacy.*]
ignore_missing_imports = true

[mypy-pandas.*]
ignore_missing_imports = true

[mypy-numpy.*]
ignore_missing_imports = true

[mypy-rdflib.*]
ignore_missing_imports = true

[mypy-owlready2.*]
ignore_missing_imports = true

[mypy-sparqlwrapper.*]
ignore_missing_imports = true

# ====================================================================
# Security Linting (bandit)
# ====================================================================
[bandit]
exclude_dirs = tests,venv,.venv,.tox,build,dist
skips =
    B101,  # assert_used (allow in tests)
    B601,  # paramiko_calls
    B602,  # subprocess_popen_with_shell_equals_true
    B603,  # subprocess_without_shell_equals_true
    B607,  # start_process_with_partial_path

# ====================================================================
# Pylint Configuration
# ====================================================================
[pylint]
load-plugins =
    pylint.extensions.docparams,
    pylint.extensions.docstyle,
    pylint.extensions.mccabe

[pylint.MASTER]
py-version = 3.8
ignore = migrations
ignore-patterns = test_.*\.py,conftest\.py

[pylint.MESSAGES CONTROL]
disable =
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    too-few-public-methods,
    too-many-arguments,
    too-many-instance-attributes,
    too-many-locals,
    duplicate-code,
    fixme,
    import-error

[pylint.FORMAT]
max-line-length = 88
good-names = i,j,k,ex,Run,_,id,df,lr

[pylint.DESIGN]
max-args = 8
max-locals = 20
max-returns = 10
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25

# ====================================================================
# Documentation (pydocstyle)
# ====================================================================
[pydocstyle]
convention = google
add_ignore =
    D100,  # Missing docstring in public module
    D104,  # Missing docstring in public package
    D105,  # Missing docstring in magic method
    D107,  # Missing docstring in __init__
    D203,  # 1 blank line required before class docstring
    D213,  # Multi-line docstring summary should start at the second line
match = (?!test_).*\.py
match_dir = ^(?!(tests|migrations|venv|\.venv|\.tox|build|dist)).*

# ====================================================================
# Build and Packaging (setuptools-scm)
# ====================================================================
[setuptools_scm]
write_to = aim2_project/_version.py
version_scheme = post-release
local_scheme = dirty-tag

# ====================================================================
# Wheel building
# ====================================================================
[bdist_wheel]
universal = 0

# ====================================================================
# Distribution uploading (twine)
# ====================================================================
[twine]
repository = pypi

# ====================================================================
# Tox configuration for multi-environment testing
# ====================================================================
[tox:tox]
envlist = py{38,39,310,311,312}, lint, type, docs
isolated_build = true

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.11.0
commands =
    pytest {posargs}

[testenv:lint]
deps =
    black>=23.7.0
    isort>=5.12.0
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    bandit>=1.7.5
commands =
    black --check aim2_project tests
    isort --check-only aim2_project tests
    flake8 aim2_project tests
    bandit -r aim2_project

[testenv:type]
deps =
    mypy>=1.5.0
    types-PyYAML>=6.0.0
    types-requests>=2.31.0
commands =
    mypy aim2_project

[testenv:docs]
deps =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
changedir = docs
commands =
    sphinx-build -b html . _build/html
